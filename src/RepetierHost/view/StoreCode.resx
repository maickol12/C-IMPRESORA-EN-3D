<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="panel1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="labelSaveDirectInfo.Text" xml:space="preserve">
    <value>This save function is meant to generate G-code files that
can be run from a sd card. For that reason it can add the
start and end code along with the regular finish commands
like they are executed during a direct print from the host.
All comments and host commands get removed!
If you only want to save the G-code in your editor, use the
save icon there. </value>
  </data>
  <metadata name="saveFileDialog.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAAwAAAAcAAAAQAAAAFwICAi1+fn7EwsLC/7y8vP+8vLz/RUVFgwAAABoAAAAWAAAACwAA
        AAUAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAYAAAAQAAAAFwkJCTWRkZHhuLi4/1VVVZoAAAAZAAAAFgAA
        AAsAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAcAAAAQAAAADjY2NnCDg4PcAgICIAAA
        ABQAAAAMAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAgAAAAMCQkJISQk
        JEwAAAAJAAAACwAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAA
        AAYAAAAHAAAABQAAAAcAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAAgAAAAMAAAADAAAAAgAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gP//+AAP/+AAA//AAAD/gAAAfwAAAH8AAAB/AAAAfwAAAH8AAAD/AA
        AA/wAAAP8AAAB/AAAAfwAAAP8AAAD/AAAA/4AAAP+AAAD/gAAB/8AAAf/AAAP/4AAD//AAB//4AA///A
        Af//4AP///AH///4D////F////////////8=
</value>
  </data>
</root>